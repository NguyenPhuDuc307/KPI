@model IndicatorTableWidgetData

<div class="table-responsive">
    <table class="table table-sm table-hover align-middle mb-0">
        <thead class="table-light">
            <tr>
                <th>Mã</th>
                <th>Tên</th>
                <th class="text-end">Hiện tại</th>
                <th class="text-end">Mục tiêu</th>
                <th class="text-center">Trạng thái</th>
                @if (Model.ShowTrend)
                {
                    <th class="text-center">Xu hướng</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (Model.IndicatorItems != null && Model.IndicatorItems.Any())
            {
                foreach (var item in Model.IndicatorItems)
                {
                    <tr>
                        <td>@item.Code</td>
                        <td>@item.Name</td>
                        <td class="text-end">@item.CurrentValue @item.MeasurementUnit</td>
                        <td class="text-end">@item.TargetValue @item.MeasurementUnit</td>
                        <td class="text-center">
                            <span class="badge @GetStatusBadgeClass(item.Status)">@item.Status</span>
                        </td>
                        @if (Model.ShowTrend && !string.IsNullOrEmpty(item.TrendDirection))
                        {
                            <td class="text-center">
                                @if (item.TrendDirection.ToLower() == "up")
                                {
                                    <span class="text-success">
                                        <i class="bi bi-arrow-up-circle-fill"></i>
                                        <span class="ms-1">@item.TrendValue</span>
                                    </span>
                                }
                                else if (item.TrendDirection.ToLower() == "down")
                                {
                                    <span class="text-danger">
                                        <i class="bi bi-arrow-down-circle-fill"></i>
                                        <span class="ms-1">@item.TrendValue</span>
                                    </span>
                                }
                                else
                                {
                                    <span class="text-secondary">
                                        <i class="bi bi-dash-circle-fill"></i>
                                        <span class="ms-1">@item.TrendValue</span>
                                    </span>
                                }
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="@(Model.ShowTrend ? 6 : 5)" class="text-center py-3 text-muted">
                        <i class="bi bi-info-circle me-2"></i>Không có dữ liệu KPI
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (Model.TotalItems > Model.PageSize)
{
    <div class="d-flex justify-content-between align-items-center p-2 border-top">
        <div class="small text-muted">
            Hiển thị @(Model.CurrentPage* Model.PageSize - Model.PageSize + 1)-@(Math.Min(Model.CurrentPage *
                    Model.PageSize, Model.TotalItems)) trong số @Model.TotalItems
    </div>
    <nav aria-label="KPI navigation">
        <ul class="pagination pagination-sm mb-0">
            @if (Model.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="@(Model.CurrentPage - 1)" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }

                @{
                    int startPage = Math.Max(1, Model.CurrentPage - 2);
                    int endPage = Math.Min(startPage + 4, Model.TotalPages);
                }

                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="#" data-page="@i">@i</a>
                    </li>
                }

                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="@(Model.CurrentPage + 1)" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
}

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "on target" => "bg-success",
            "above target" => "bg-success",
            "at risk" => "bg-warning",
            "below target" => "bg-danger",
            "inactive" => "bg-secondary",
            _ => "bg-info"
        };
    }
}
