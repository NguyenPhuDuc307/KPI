@model IndicatorCardWidgetData

<div class="card h-100 border-0">
    <div class="card-body p-3">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <span class="badge bg-light text-dark small">@Model.Code</span>
            <span class="badge @GetStatusBadgeClass(Model.Status)">@Model.Status</span>
        </div>

        <h5 class="card-title mb-3">@Model.Name</h5>

        <div class="row align-items-end mt-2 mb-3">
            <div class="col-7">
                <span class="text-muted small">Hiện tại</span>
                <div class="h3 mb-0">@Model.CurrentValue</div>
            </div>
            <div class="col-5 text-end">
                <span class="text-muted small">Mục tiêu</span>
                <div class="h5 mb-0 text-muted">@Model.TargetValue</div>
            </div>
        </div>

        <div class="mb-1 small text-end text-muted">@Model.MeasurementUnit</div>

        <div class="progress mb-3" style="height: 8px;">
            <div class="progress-bar @GetProgressBarClass(Model)" role="progressbar"
                style="width: @(Model.ProgressPercentage)%" aria-valuenow="@Model.ProgressPercentage" aria-valuemin="0"
                aria-valuemax="100">
            </div>
        </div>

        <div class="d-flex justify-content-between align-items-center">
            <div class="text-muted small">
                Cập nhật: @Model.LastUpdated.ToString("dd/MM/yyyy")
            </div>

            @if (!string.IsNullOrEmpty(Model.TrendDirection))
            {
                <div>
                    @if (Model.TrendDirection.ToLower() == "up")
                    {
                        <span class="badge bg-success">
                            <i class="bi bi-arrow-up-short"></i> @Model.TrendValue
                        </span>
                    }
                    else if (Model.TrendDirection.ToLower() == "down")
                    {
                        <span class="badge bg-danger">
                            <i class="bi bi-arrow-down-short"></i> @Model.TrendValue
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">
                            <i class="bi bi-dash"></i> @Model.TrendValue
                        </span>
                    }
                </div>
            }
        </div>
    </div>
</div>

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "on target" => "bg-success",
            "above target" => "bg-success",
            "at risk" => "bg-warning",
            "below target" => "bg-danger",
            "inactive" => "bg-secondary",
            _ => "bg-info"
        };
    }

    private string GetProgressBarClass(IndicatorCardWidgetData model)
    {
        if (model.ProgressPercentage >= 100)
            return "bg-success";
        if (model.ProgressPercentage >= 75)
            return "bg-info";
        if (model.ProgressPercentage >= 50)
            return "bg-warning";
        return "bg-danger";
    }
}
