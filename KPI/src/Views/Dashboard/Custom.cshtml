@model KPISolution.Models.ViewModels.Dashboard.CustomDashboardViewModel

@{
    ViewData["Title"] = "Bảng điều khiển tùy chỉnh";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">@Model.Title</h1>
            <p class="text-muted small mb-0">Bảng điều khiển được cá nhân hóa cho @Model.UserName</p>
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary me-2" data-bs-toggle="modal"
                data-bs-target="#addWidgetModal">
                <i class="bi bi-plus-circle me-1"></i>Thêm widget
            </button>
            <div class="btn-group">
                <button type="button" class="btn btn-primary" id="saveLayoutBtn">
                    <i class="bi bi-save me-1"></i>Lưu thay đổi
                </button>
                <button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split"
                    data-bs-toggle="dropdown" aria-expanded="false">
                    <span class="visually-hidden">Tùy chọn</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item" href="#" data-bs-toggle="modal"
                            data-bs-target="#editDashboardModal">Chỉnh sửa thông tin</a></li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li>
                        <form asp-action="Delete" asp-route-id="@Model.Id" method="post" id="deleteDashboardForm">
                            <button type="button" class="dropdown-item text-danger" onclick="confirmDelete()">Xóa bảng
                                điều khiển</button>
                        </form>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    @if (Model.Description != null && !string.IsNullOrEmpty(Model.Description))
    {
        <div class="alert alert-info mb-4">
            <i class="bi bi-info-circle me-2"></i>@Model.Description
        </div>
    }

    <!-- Dashboard Grid -->
    <div class="row" id="dashboardGrid">
        @if (Model.Items != null && Model.Items.Any())
        {
            foreach (var item in Model.Items)
            {
                <div class="col-md-@item.Width mb-4 dashboard-item" data-item-id="@item.Id">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header d-flex justify-content-between align-items-center py-2">
                            <h5 class="mb-0 fs-6">@item.Title</h5>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary"
                                    onclick="configureWidget('@item.Id')">
                                    <i class="bi bi-gear-fill"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeWidget('@item.Id')">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            @{
                                string partialName = item.WidgetType switch
                                {
                                    "KpiCard" => "_KpiCardWidget",
                                    "KpiTable" => "_KpiTableWidget",
                                    "Chart" => "_ChartWidget",
                                    "CsfProgress" => "_CsfProgressWidget",
                                    "Text" => "_TextWidget",
                                    _ => "_EmptyWidget"
                                };
                            }

                            @if (item.WidgetData != null)
                            {
                                <partial name="@partialName" model="@item.WidgetData" />
                            }
                            else
                            {
                                <div class="p-4 text-center text-muted">
                                    <i class="bi bi-exclamation-circle fs-3"></i>
                                    <p class="mt-2">Không thể hiển thị dữ liệu widget</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center p-5">
                <div class="mb-4">
                    <i class="bi bi-grid-3x3-gap fs-1 text-muted"></i>
                </div>
                <h3>Bảng điều khiển của bạn đang trống</h3>
                <p class="text-muted">Hãy thêm widget để bắt đầu theo dõi các chỉ số KPI quan trọng</p>
                <button type="button" class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#addWidgetModal">
                    <i class="bi bi-plus-circle me-2"></i>Thêm widget đầu tiên
                </button>
            </div>
        }
    </div>
</div>

<!-- Add Widget Modal -->
<div class="modal fade" id="addWidgetModal" tabindex="-1" aria-labelledby="addWidgetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addWidgetModalLabel">Thêm widget mới</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 widget-type-card" data-widget-type="KpiCard">
                            <div class="card-body text-center p-4">
                                <i class="bi bi-credit-card-2-front fs-1 text-primary mb-3"></i>
                                <h5 class="card-title">KPI Card</h5>
                                <p class="small text-muted">Hiển thị thông tin KPI dạng thẻ</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 widget-type-card" data-widget-type="KpiTable">
                            <div class="card-body text-center p-4">
                                <i class="bi bi-table fs-1 text-success mb-3"></i>
                                <h5 class="card-title">KPI Table</h5>
                                <p class="small text-muted">Hiển thị danh sách KPI dạng bảng</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 widget-type-card" data-widget-type="Chart">
                            <div class="card-body text-center p-4">
                                <i class="bi bi-bar-chart-line fs-1 text-info mb-3"></i>
                                <h5 class="card-title">Chart</h5>
                                <p class="small text-muted">Hiển thị dữ liệu KPI dạng biểu đồ</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 widget-type-card" data-widget-type="CsfProgress">
                            <div class="card-body text-center p-4">
                                <i class="bi bi-check2-square fs-1 text-warning mb-3"></i>
                                <h5 class="card-title">CSF Progress</h5>
                                <p class="small text-muted">Hiển thị tiến độ của các CSF</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 widget-type-card" data-widget-type="Text">
                            <div class="card-body text-center p-4">
                                <i class="bi bi-textarea-t fs-1 text-secondary mb-3"></i>
                                <h5 class="card-title">Text</h5>
                                <p class="small text-muted">Hiển thị văn bản tùy chỉnh</p>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="widgetConfigForm" class="mt-4 d-none">
                    <hr>
                    <h5 class="mb-3">Cấu hình widget</h5>

                    <form id="widgetForm">
                        <input type="hidden" id="widgetType" name="widgetType" />

                        <div class="mb-3">
                            <label for="widgetTitle" class="form-label">Tiêu đề</label>
                            <input type="text" class="form-control" id="widgetTitle" name="widgetTitle" required>
                        </div>

                        <div class="row mb-3">
                            <div class="col">
                                <label for="widgetWidth" class="form-label">Độ rộng</label>
                                <select class="form-select" id="widgetWidth" name="widgetWidth">
                                    <option value="4">Nhỏ (1/3)</option>
                                    <option value="6">Vừa (1/2)</option>
                                    <option value="8">Rộng (2/3)</option>
                                    <option value="12">Đầy đủ</option>
                                </select>
                            </div>
                            <div class="col">
                                <label for="widgetOrder" class="form-label">Vị trí</label>
                                <input type="number" class="form-control" id="widgetOrder" name="widgetOrder" min="0"
                                    value="0">
                            </div>
                        </div>

                        <!-- KPI Card Config -->
                        <div id="kpiCardConfig" class="widget-config d-none">
                            <div class="mb-3">
                                <label for="kpiSelect" class="form-label">Chọn KPI</label>
                                <select class="form-select" id="kpiSelect" name="kpiId">
                                    <option value="">-- Chọn KPI --</option>
                                    @foreach (var kpi in Model.AvailableKpis)
                                    {
                                        <option value="@kpi.Id">@kpi.Code - @kpi.Name</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- KPI Table Config -->
                        <div id="kpiTableConfig" class="widget-config d-none">
                            <div class="mb-3">
                                <label class="form-label">Loại KPI</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="KRI" id="kpiTypeKRI"
                                        name="kpiTypes" checked>
                                    <label class="form-check-label" for="kpiTypeKRI">KRIs</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="PI" id="kpiTypePI"
                                        name="kpiTypes">
                                    <label class="form-check-label" for="kpiTypePI">PIs</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="RI" id="kpiTypeRI"
                                        name="kpiTypes">
                                    <label class="form-check-label" for="kpiTypeRI">RIs</label>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="tableRowCount" class="form-label">Số hàng hiển thị</label>
                                <input type="number" class="form-control" id="tableRowCount" name="rowCount" min="1"
                                    max="20" value="5">
                            </div>
                        </div>

                        <!-- Chart Config -->
                        <div id="chartConfig" class="widget-config d-none">
                            <div class="mb-3">
                                <label for="chartType" class="form-label">Loại biểu đồ</label>
                                <select class="form-select" id="chartType" name="chartType">
                                    <option value="line">Đường</option>
                                    <option value="bar">Cột</option>
                                    <option value="pie">Tròn</option>
                                    <option value="doughnut">Vòng</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="dataSource" class="form-label">Nguồn dữ liệu</label>
                                <select class="form-select" id="dataSource" name="dataSource">
                                    <option value="kpiStatus">Trạng thái KPI</option>
                                    <option value="kpiTrend">Xu hướng KPI</option>
                                    <option value="departmentPerformance">Hiệu suất phòng ban</option>
                                </select>
                            </div>
                        </div>

                        <!-- CSF Progress Config -->
                        <div id="csfProgressConfig" class="widget-config d-none">
                            <div class="mb-3">
                                <label for="csfSelect" class="form-label">Chọn CSF</label>
                                <select class="form-select" id="csfSelect" name="csfId">
                                    <option value="">-- Chọn CSF --</option>
                                    @foreach (var csf in Model.AvailableCsfs)
                                    {
                                        <option value="@csf.Id">@csf.Code - @csf.Name</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Text Config -->
                        <div id="textConfig" class="widget-config d-none">
                            <div class="mb-3">
                                <label for="textContent" class="form-label">Nội dung</label>
                                <textarea class="form-control" id="textContent" name="textContent" rows="4"></textarea>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="addWidgetBtn" disabled>Thêm widget</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Dashboard Modal -->
<div class="modal fade" id="editDashboardModal" tabindex="-1" aria-labelledby="editDashboardModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editDashboardModalLabel">Chỉnh sửa bảng điều khiển</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="Edit" asp-route-id="@Model.Id" method="post">
                <div class="modal-body">
                    <div class="mb-3">
                        <label asp-for="Title" class="form-label">Tiêu đề</label>
                        <input asp-for="Title" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Description" class="form-label">Mô tả</label>
                        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input asp-for="IsDefault" class="form-check-input" type="checkbox">
                            <label asp-for="IsDefault" class="form-check-label">Đặt làm bảng điều khiển mặc định</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

    <script>
        // Dashboard grid sorting and configuration
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize sortable grid
            const grid = document.getElementById('dashboardGrid');
            if (grid) {
                new Sortable(grid, {
                    animation: 150,
                    handle: '.card-header',
                    ghostClass: 'dashboard-item-ghost',
                    onEnd: function () {
                        // Update widget order after sorting
                        updateWidgetOrder();
                    }
                });
            }

            // Widget type selection
            const widgetCards = document.querySelectorAll('.widget-type-card');
            const widgetConfigForm = document.getElementById('widgetConfigForm');
            const widgetConfigs = document.querySelectorAll('.widget-config');
            const widgetTypeInput = document.getElementById('widgetType');
            const addWidgetBtn = document.getElementById('addWidgetBtn');

            widgetCards.forEach(card => {
                card.addEventListener('click', function () {
                    // Remove selection from all cards
                    widgetCards.forEach(c => c.classList.remove('border-primary', 'shadow'));

                    // Add selection to clicked card
                    this.classList.add('border-primary', 'shadow');

                    // Show config form
                    widgetConfigForm.classList.remove('d-none');

                    // Hide all config sections
                    widgetConfigs.forEach(config => config.classList.add('d-none'));

                    // Get widget type and show appropriate config
                    const widgetType = this.dataset.widgetType;
                    widgetTypeInput.value = widgetType;

                    // Show specific config section
                    const configSection = document.getElementById(widgetType.charAt(0).toLowerCase() + widgetType.slice(1) + 'Config');
                    if (configSection) {
                        configSection.classList.remove('d-none');
                    }

                    // Enable add button
                    addWidgetBtn.disabled = false;
                });
            });

            // Add widget form submission
            const widgetForm = document.getElementById('widgetForm');

            document.getElementById('addWidgetBtn').addEventListener('click', function () {
                const formData = new FormData(widgetForm);
                const widgetData = {};

                for (const [key, value] of formData.entries()) {
                    widgetData[key] = value;
                }

                // Send AJAX request to add widget
                fetch('@Url.Action("AddItem", "Dashboard", new { id = Model.Id })', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(widgetData)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Reload the page to show the new widget
                            window.location.reload();
                        } else {
                            alert('Error adding widget: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error adding widget');
                    });
            });

            // Save dashboard layout
            document.getElementById('saveLayoutBtn').addEventListener('click', function () {
                const layout = getLayoutData();

                fetch('@Url.Action("SaveLayout", "Dashboard", new { id = Model.Id })', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(layout)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Layout saved successfully');
                        } else {
                            alert('Error saving layout: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error saving layout');
                    });
            });
        });

        // Update widget order in memory after sorting
        function updateWidgetOrder() {
            const items = document.querySelectorAll('.dashboard-item');
            items.forEach((item, index) => {
                item.dataset.order = index;
            });
        }

        // Get current layout data
        function getLayoutData() {
            const items = document.querySelectorAll('.dashboard-item');
            const layout = {
                items: []
            };

            items.forEach((item, index) => {
                layout.items.push({
                    id: item.dataset.itemId,
                    order: index
                });
            });

            return layout;
        }

        // Configure existing widget
        function configureWidget(widgetId) {
            alert('Widget configuration not implemented: ' + widgetId);
        }

        // Remove widget
        function removeWidget(widgetId) {
            if (confirm('Are you sure you want to remove this widget?')) {
                fetch('@Url.Action("RemoveItem", "Dashboard", new { id = Model.Id })' + '&itemId=' + widgetId, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Remove the widget from DOM
                            const widget = document.querySelector(`.dashboard-item[data-item-id="${widgetId}"]`);
                            if (widget) {
                                widget.remove();
                            }
                        } else {
                            alert('Error removing widget: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error removing widget');
                    });
            }
        }

        // Confirm dashboard deletion
        function confirmDelete() {
            if (confirm('Are you sure you want to delete this dashboard? This action cannot be undone.')) {
                document.getElementById('deleteDashboardForm').submit();
            }
        }
    </script>

    @await RenderSectionAsync("WidgetScripts", required: false)
}