// <auto-generated />
using System;
using KPISolution.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KPISolution.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250509073506_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("KPISolution.Models.Entities.Dashboard.CustomDashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsShared")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LayoutConfiguration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RefreshInterval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CustomDashboards");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Dashboard.DashboardItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ChartType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataConfiguration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("IndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowLegend")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SuccessFactorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TimePeriod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("DashboardItems");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DashboardPreferences")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("HierarchyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDepartmentAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsIndicatorOwner")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsKpiOwner")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationPreferences")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Identity.IndicatorRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CollectionMethod")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IndicatorType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasuredBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasurementType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PerformanceIndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Period")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResultIndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Source")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubmittedById")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SuccessFactorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Unit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceIndicatorId");

                    b.HasIndex("ResultIndicatorId");

                    b.HasIndex("SubmittedById");

                    b.HasIndex("SuccessFactorId");

                    b.ToTable("Measurements", (string)null);

                    b.HasDiscriminator<string>("MeasurementType").HasValue("Generic");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.PerformanceIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionPlan")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ControlLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CurrentValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DataCollectionMethod")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Formula")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndicatorType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxAlertThreshold")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("MaximumValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("MeasurementDirection")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeasurementFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MinAlertThreshold")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("MinimumValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PerformanceLevel")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("PerformanceTrend")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponsiblePersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponsibleTeamMember")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResultIndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReviewFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("SuccessFactorId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TargetValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ResponsiblePersonId");

                    b.HasIndex("ResultIndicatorId");

                    b.HasIndex("SuccessFactorId");

                    b.ToTable("PerformanceIndicators", (string)null);
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.ResultIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CurrentValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DataSource")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Formula")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaximumValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("MeasurementDirection")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeasurementFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MeasurementScope")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinimumValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PerformanceTrend")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProcessArea")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponsiblePersonId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SuccessFactorId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TargetValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("TimeFrame")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ResponsiblePersonId");

                    b.HasIndex("SuccessFactorId");

                    b.ToTable("ResultIndicators", (string)null);
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.SuccessFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BaselineValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CalculationMethod")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CurrentValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DataSource")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Direction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FactorCategory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FactorStatus")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastMeasurementDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LowerThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MeasurementFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextMeasurementDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ObjectiveId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponsibleUserId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RiskLevel")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TargetValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ThresholdValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("UpperThreshold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("SuccessFactors", (string)null);
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Measurement.Target", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("IndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("IndicatorType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("MaximumValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinimumValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PerformanceIndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ResultIndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("StretchTarget")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("SuccessFactorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetType")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Unit")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PerformanceIndicatorId");

                    b.HasIndex("ResultIndicatorId");

                    b.HasIndex("SuccessFactorId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Measurement.Threshold", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GreenDescription")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GreenThreshold")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("HigherIsBetter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndicatorType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("PerformanceIndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedDescription")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RedThreshold")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("ResultIndicatorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SuccessFactorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("YellowDescription")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("YellowThreshold")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PerformanceIndicatorId");

                    b.HasIndex("ResultIndicatorId");

                    b.HasIndex("SuccessFactorId");

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsKpiNotification")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSent")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("KpiId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Organization.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartmentHeadId")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentDepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentHeadId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Organization.Objective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BusinessPerspective")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("FiscalYear")
                        .HasMaxLength(9)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponsiblePersonId")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Timeframe")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ParentId");

                    b.ToTable("Objectives", (string)null);
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Progress.ProgressUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Achievements")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Actions")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("AttentionReason")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOnTrack")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Issues")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NeedsAttention")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NextSteps")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextUpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreviousPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreviousRiskLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreviousStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SuccessFactorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SuccessFactorId");

                    b.ToTable("ProgressUpdates", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Dashboard.DashboardItem", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Dashboard.CustomDashboard", "Dashboard")
                        .WithMany("DashboardItems")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Organization.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "Manager")
                        .WithMany("DirectReports")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Identity.IndicatorRole", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Organization.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.Measurement", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Indicator.PerformanceIndicator", "PerformanceIndicator")
                        .WithMany("Measurements")
                        .HasForeignKey("PerformanceIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Indicator.ResultIndicator", "ResultIndicator")
                        .WithMany("Measurements")
                        .HasForeignKey("ResultIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById");

                    b.HasOne("KPISolution.Models.Entities.Indicator.SuccessFactor", "SuccessFactor")
                        .WithMany("Measurements")
                        .HasForeignKey("SuccessFactorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PerformanceIndicator");

                    b.Navigation("ResultIndicator");

                    b.Navigation("SubmittedBy");

                    b.Navigation("SuccessFactor");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.PerformanceIndicator", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Organization.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId");

                    b.HasOne("KPISolution.Models.Entities.Indicator.ResultIndicator", "ResultIndicator")
                        .WithMany("PerformanceIndicators")
                        .HasForeignKey("ResultIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Indicator.SuccessFactor", "SuccessFactor")
                        .WithMany("PerformanceIndicators")
                        .HasForeignKey("SuccessFactorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("ResponsiblePerson");

                    b.Navigation("ResultIndicator");

                    b.Navigation("SuccessFactor");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.ResultIndicator", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Organization.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId");

                    b.HasOne("KPISolution.Models.Entities.Indicator.SuccessFactor", "SuccessFactor")
                        .WithMany("ResultIndicators")
                        .HasForeignKey("SuccessFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("ResponsiblePerson");

                    b.Navigation("SuccessFactor");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.SuccessFactor", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Organization.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("KPISolution.Models.Entities.Organization.Objective", "Objective")
                        .WithMany("SuccessFactors")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Indicator.SuccessFactor", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId");

                    b.Navigation("Department");

                    b.Navigation("Objective");

                    b.Navigation("Parent");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Measurement.Target", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("KPISolution.Models.Entities.Indicator.PerformanceIndicator", "PerformanceIndicator")
                        .WithMany()
                        .HasForeignKey("PerformanceIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Indicator.ResultIndicator", "ResultIndicator")
                        .WithMany()
                        .HasForeignKey("ResultIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Indicator.SuccessFactor", "SuccessFactor")
                        .WithMany()
                        .HasForeignKey("SuccessFactorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("PerformanceIndicator");

                    b.Navigation("ResultIndicator");

                    b.Navigation("SuccessFactor");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Measurement.Threshold", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("KPISolution.Models.Entities.Indicator.PerformanceIndicator", "PerformanceIndicator")
                        .WithMany()
                        .HasForeignKey("PerformanceIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Indicator.ResultIndicator", "ResultIndicator")
                        .WithMany()
                        .HasForeignKey("ResultIndicatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KPISolution.Models.Entities.Indicator.SuccessFactor", "SuccessFactor")
                        .WithMany()
                        .HasForeignKey("SuccessFactorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("PerformanceIndicator");

                    b.Navigation("ResultIndicator");

                    b.Navigation("SuccessFactor");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Notification.Notification", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Organization.Department", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", "DepartmentHead")
                        .WithMany()
                        .HasForeignKey("DepartmentHeadId");

                    b.HasOne("KPISolution.Models.Entities.Organization.Department", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DepartmentHead");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Organization.Objective", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Organization.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("KPISolution.Models.Entities.Organization.Objective", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Progress.ProgressUpdate", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Indicator.SuccessFactor", "SuccessFactor")
                        .WithMany()
                        .HasForeignKey("SuccessFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuccessFactor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.IndicatorRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.IndicatorRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KPISolution.Models.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Dashboard.CustomDashboard", b =>
                {
                    b.Navigation("DashboardItems");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("DirectReports");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.PerformanceIndicator", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.ResultIndicator", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("PerformanceIndicators");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Indicator.SuccessFactor", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Measurements");

                    b.Navigation("PerformanceIndicators");

                    b.Navigation("ResultIndicators");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Organization.Department", b =>
                {
                    b.Navigation("ChildDepartments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("KPISolution.Models.Entities.Organization.Objective", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("SuccessFactors");
                });
#pragma warning restore 612, 618
        }
    }
}
