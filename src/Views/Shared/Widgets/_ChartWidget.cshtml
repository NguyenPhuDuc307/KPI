@model KPISolution.Models.ViewModels.Dashboard.Widgets.ChartWidgetData

<div class="card shadow-sm mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold">@Model.Title</h6>
    </div>
    <div class="card-body">
        @if (!string.IsNullOrEmpty(Model.Description))
        {
            <p class="mb-3 small text-muted">@Model.Description</p>
        }
        <div class="chart-container" style="position: relative; height:300px;">
            <canvas id="chart-@Model.WidgetId"></canvas>
        </div>
    </div>
</div>

@if (Model.ShowLegend && Model.ChartType.ToString() != "Pie" && Model.ChartType.ToString() != "Doughnut")
{
    <div class="chart-legend mt-2 small d-flex flex-wrap justify-content-center">
        @if (Model.Datasets != null)
        {
            for (int i = 0; i < Model.Datasets.Length; i++)
            {
                var dataset = Model.Datasets[i];
                var color = dataset.BackgroundColor;

                <div class="me-3 mb-1 d-flex align-items-center">
                    <span class="legend-color me-1"
                        style="background-color: @color; width: 10px; height: 10px; display: inline-block;"></span>
                    <span>@dataset.Label</span>
                </div>
            }
        }
    </div>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var ctx = document.getElementById('chart-@Model.WidgetId').getContext('2d');
        var chartData = {
            labels: @Html.Raw(Json.Serialize(Model.Labels)),
            datasets: @Html.Raw(Json.Serialize(Model.Datasets))
        };

        var options = {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                legend: {
                    display: @Model.ShowLegend.ToString().ToLowerInvariant(),
                    position: 'top'
                },
                tooltip: {
                    enabled: true
                }
            }
        };

        new Chart(ctx, {
            type: '@Model.ChartType.ToString().ToLowerInvariant()',
            data: chartData,
            options: options
        });
    });
</script>
