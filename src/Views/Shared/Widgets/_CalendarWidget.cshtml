@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CalendarWidgetData

<div class="calendar-widget h-100">
    <div class="card h-100 border-0 shadow-sm">
        <div class="card-header bg-transparent">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">@(string.IsNullOrEmpty(Model.Title) ? "Lịch sự kiện" : Model.Title)</h5>
                <div class="btn-group btn-group-sm">
                    <button type="button" class="btn btn-outline-secondary active"
                        id="month-view-@Model.WidgetId">Tháng</button>
                    <button type="button" class="btn btn-outline-secondary" id="list-view-@Model.WidgetId">Danh
                        sách</button>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <small class="text-muted">@Model.Description</small>
            }
        </div>

        <div class="card-body p-0">
            <div id="calendar-view-@Model.WidgetId">
                <div class="calendar-header d-flex justify-content-between align-items-center p-3 border-bottom">
                    <button class="btn btn-sm btn-link text-decoration-none" id="prev-month-@Model.WidgetId">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <h6 class="mb-0" id="current-month-@Model.WidgetId">
                        @(Model.CurrentMonth?.ToString("MMMM yyyy") ?? DateTime.Now.ToString("MMMM yyyy"))
                    </h6>
                    <button class="btn btn-sm btn-link text-decoration-none" id="next-month-@Model.WidgetId">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>

                <div class="calendar-body p-2">
                    <div class="calendar-grid">
                        <div class="calendar-weekdays d-flex">
                            <div class="calendar-cell">CN</div>
                            <div class="calendar-cell">T2</div>
                            <div class="calendar-cell">T3</div>
                            <div class="calendar-cell">T4</div>
                            <div class="calendar-cell">T5</div>
                            <div class="calendar-cell">T6</div>
                            <div class="calendar-cell">T7</div>
                        </div>
                        <div class="calendar-days" id="calendar-days-@Model.WidgetId">
                            <!-- Calendar days will be inserted here by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>

            <div id="list-view-@Model.WidgetId" class="d-none">
                <div class="list-group list-group-flush" id="events-list-@Model.WidgetId">
                    @if (Model.Events != null && Model.Events.Any())
                    {
                        foreach (var evt in Model.Events.OrderBy(e => e.Start))
                        {
                            <div class="list-group-item list-group-item-action">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@evt.Title</h6>
                                    <small class="@GetDateClass(evt.Start)">
                                        @evt.Start.ToString("dd/MM/yyyy")
                                        @if (evt.End.HasValue && evt.End.Value.Date != evt.Start.Date)
                                        {
                                            <span> - @evt.End.Value.ToString("dd/MM/yyyy")</span>
                                        }
                                    </small>
                                </div>
                                <p class="mb-1 small">@evt.Description</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="badge @GetEventTypeClass(evt.EntityType)">@evt.EntityType</small>
                                    @if (!string.IsNullOrEmpty(evt.Url))
                                    {
                                        <a href="@evt.Url" class="btn btn-sm btn-link py-0 px-0">Chi tiết</a>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="list-group-item text-center py-4">
                            <i class="bi bi-calendar-x text-muted fs-3 mb-2"></i>
                            <p class="text-muted mb-0">Không có sự kiện nào</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="card-footer bg-transparent d-flex justify-content-between align-items-center">
            <small class="text-muted">Tổng số: @(Model.Events?.Count ?? 0) sự kiện</small>
        </div>
    </div>
</div>

<script id="calendar-data-@Model.WidgetId" type="application/json">
    @Html.Raw(JsonSerializer.Serialize(Model.Events?.Select(e => new
    {
                            id = e.Id,
                                                                                                                                                                                                title = e.Title,
                                                                                                                                                                                                description = e.Description,
                                                                                                                                                                                                startDate = e.Start.ToString("yyyy-MM-dd"),
                                                                                                                                                                                                endDate = e.End?.ToString("yyyy-MM-dd"),
                                                                                                                                                                                                url = e.Url,
                                                                                                                                                                                                type = e.EntityType,
                                                                                                                                                                                                colorClass = e.BorderColor,
                                                                                                                                                                                                isAllDay = e.AllDay
                                                                })))
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        initCalendar@(Model.WidgetId)();
    });

    function initCalendar@(Model.WidgetId)() {
        // Get calendar data
        const calendarDataElement = document.getElementById('calendar-data-@Model.WidgetId');
        const events = calendarDataElement ? JSON.parse(calendarDataElement.textContent) : [];

        // Current date
        let currentDate = new Date('@(Model.CurrentMonth.HasValue ? $"{Model.CurrentMonth.Value.Year}-{Model.CurrentMonth.Value.Month:D2}-01" : DateTime.Now.ToString("yyyy-MM-01"))');
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();

        // Calendar elements
        const calendarDays = document.getElementById('calendar-days-@Model.WidgetId');
        const currentMonthElement = document.getElementById('current-month-@Model.WidgetId');
        const prevMonthButton = document.getElementById('prev-month-@Model.WidgetId');
        const nextMonthButton = document.getElementById('next-month-@Model.WidgetId');

        // View toggle buttons
        const monthViewButton = document.getElementById('month-view-@Model.WidgetId');
        const listViewButton = document.getElementById('list-view-@Model.WidgetId');
        const calendarView = document.getElementById('calendar-view-@Model.WidgetId');
        const listView = document.getElementById('list-view-@Model.WidgetId');

        // Initialize calendar
        renderCalendar();

        // Event listeners
        prevMonthButton.addEventListener('click', function () {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            renderCalendar();
        });

        nextMonthButton.addEventListener('click', function () {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            renderCalendar();
        });

        monthViewButton.addEventListener('click', function () {
            monthViewButton.classList.add('active');
            listViewButton.classList.remove('active');
            calendarView.classList.remove('d-none');
            listView.classList.add('d-none');
        });

        listViewButton.addEventListener('click', function () {
            listViewButton.classList.add('active');
            monthViewButton.classList.remove('active');
            listView.classList.remove('d-none');
            calendarView.classList.add('d-none');
        });

        // Render calendar
        function renderCalendar() {
            // Update month display
            const monthNames = ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6',
                'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'];
            currentMonthElement.textContent = `${monthNames[currentMonth]}, ${currentYear}`;

            // Clear previous days
            calendarDays.innerHTML = '';

            // Get first day of month and last day of month
            const firstDay = new Date(currentYear, currentMonth, 1).getDay();
            const lastDay = new Date(currentYear, currentMonth + 1, 0).getDate();

            // Create calendar grid
            let dayCount = 1;

            // Create rows (typically 6 weeks)
            for (let row = 0; row < 6; row++) {
                const weekRow = document.createElement('div');
                weekRow.className = 'calendar-week d-flex';

                // Create 7 days for each week
                for (let col = 0; col < 7; col++) {
                    const dayCell = document.createElement('div');
                    dayCell.className = 'calendar-cell';

                    // Add day number if within current month
                    if (row === 0 && col < firstDay) {
                        // Empty cell before first day
                        dayCell.classList.add('inactive');
                    } else if (dayCount > lastDay) {
                        // Empty cell after last day
                        dayCell.classList.add('inactive');
                    } else {
                        // Current month day
                        dayCell.textContent = dayCount;

                        // Check if it's today
                        const today = new Date();
                        if (dayCount === today.getDate() &&
                            currentMonth === today.getMonth() &&
                            currentYear === today.getFullYear()) {
                            dayCell.classList.add('today');
                        }

                        // Check for events on this day
                        const dateStr = `${currentYear}-${(currentMonth + 1).toString().padStart(2, '0')}-${dayCount.toString().padStart(2, '0')}`;
                        const dayEvents = events.filter(e => {
                            // Check if the event starts or ends on this date, or spans across this date
                            const eventStart = new Date(e.startDate);
                            const eventEnd = e.endDate ? new Date(e.endDate) : new Date(e.startDate);
                            const currentDate = new Date(dateStr);

                            return (eventStart <= currentDate && eventEnd >= currentDate);
                        });

                        if (dayEvents.length > 0) {
                            // Create event indicators
                            const eventsContainer = document.createElement('div');
                            eventsContainer.className = 'event-indicators';

                            // Limit to 3 visible indicators
                            const visibleEvents = dayEvents.slice(0, 3);

                            visibleEvents.forEach(event => {
                                const indicator = document.createElement('div');
                                indicator.className = 'event-indicator';
                                indicator.classList.add(event.colorClass || 'bg-primary');
                                eventsContainer.appendChild(indicator);
                            });

                            if (dayEvents.length > 3) {
                                const moreIndicator = document.createElement('div');
                                moreIndicator.className = 'event-indicator more';
                                moreIndicator.textContent = '+' + (dayEvents.length - 3);
                                eventsContainer.appendChild(moreIndicator);
                            }

                            dayCell.appendChild(eventsContainer);

                            // Add tooltip with event titles
                            dayCell.title = dayEvents.map(e => e.title).join('\n');
                            dayCell.classList.add('has-events');

                            // Add click event
                            dayCell.addEventListener('click', function () {
                                // Switch to list view and possibly filter by this day
                                listViewButton.click();
                                // Could implement day filtering here
                            });
                        }

                        dayCount++;
                    }

                    weekRow.appendChild(dayCell);
                }

                calendarDays.appendChild(weekRow);

                // Break if we've reached the end of the month
                if (dayCount > lastDay) {
                    break;
                }
            }
        }
    }
</script>

<style>
    .calendar-widget .calendar-weekdays {
        font-weight: bold;
        border-bottom: 1px solid #e9ecef;
    }

    .calendar-widget .calendar-cell {
        flex: 1;
        text-align: center;
        padding: 6px;
        min-height: 34px;
        position: relative;
    }

    .calendar-widget .calendar-week {
        border-bottom: 1px solid #f8f9fa;
    }

    .calendar-widget .calendar-cell.inactive {
        color: #c8c8c8;
    }

    .calendar-widget .calendar-cell.today {
        background-color: rgba(13, 110, 253, 0.1);
        font-weight: bold;
        border-radius: 4px;
    }

    .calendar-widget .calendar-cell.has-events {
        cursor: pointer;
    }

    .calendar-widget .calendar-cell .event-indicators {
        display: flex;
        justify-content: center;
        gap: 2px;
        margin-top: 2px;
    }

    .calendar-widget .calendar-cell .event-indicator {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background-color: #0d6efd;
    }

    .calendar-widget .calendar-cell .event-indicator.more {
        width: auto;
        height: auto;
        font-size: 8px;
        line-height: 1;
        color: #6c757d;
        background: none;
    }

    .calendar-widget .list-group-item {
        border-left: none;
        border-right: none;
    }

    .calendar-widget .list-group-item:first-child {
        border-top: none;
    }
</style>

@functions {
    public string GetDateClass(DateTime date)
    {
        var today = DateTime.Today;
        if (date.Date == today)
            return "text-success";
        if (date.Date < today)
            return "text-muted";
        return "text-primary";
    }

    public string GetEventTypeClass(string type)
    {
        return type?.ToLower() switch
        {
            "kpi" => "bg-primary",
            "csf" => "bg-success",
            "ri" => "bg-info",
            "pi" => "bg-warning",
            "deadline" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
